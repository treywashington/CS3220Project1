module Project1(SW,KEY,LEDR,LEDG,HEX0,HEX1,HEX2,HEX3,CLOCK_50);
	input  [9:0] SW;
	input  [3:0] KEY;
	input  CLOCK_50;
	output [9:0] LEDR;
	output [7:0] LEDG;
	output [6:0] HEX0,HEX1,HEX2,HEX3;
	// Project1 uses the existing 50MHz clock (no need for a PLL)
	wire clk=CLOCK_50;
	// No need to use reset/locked because CLOCK_50 is always OK

	// Counters for centiseconds (100th of a second), deciseconds (1/10 second), and seconds
	reg [18:0] waitcentisec=19'd0;
	reg [3:0]  valcentisec=4'd0;
	reg [3:0] valdecisec=4'd0;
	reg [5:0] valsec=6'd0;
	always @(posedge clk) begin
		waitcentisec<=waitcentisec+19'b1;
		if(waitcentisec==19'd499999) begin
			waitcentisec<=19'd0;
			valcentisec<=valcentisec+4'd1;
			if(valcentisec==4'd9) begin
				valcentisec<=4'd0;
				valdecisec<=valdecisec+4'd1;
				if(valdecisec==4'd9) begin
					valdecisec<=4'd0;
					valsec<=valsec+6'd1;
				end
			end
		end
	end

	// Dispay centiseconds and seconds on HEX
	wire [3:0] digit0=valcentisec;
	wire [3:0] digit1=valdecisec;
	wire [3:0] digit2=valsec%6'd10;
	wire [3:0] digit3=valsec/6'd10;
	
	// Decode 4-bit values into 7-segment patterns
	SevenSeg s0(.IN(digit0),.OUT(HEX0));
	SevenSeg s1(.IN(digit1),.OUT(HEX1));
	SevenSeg s2(.IN(digit2),.OUT(HEX2));
	SevenSeg s3(.IN(digit3),.OUT(HEX3));
endmodule
